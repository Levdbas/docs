<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on Timber Docs</title>
    <link>https://timber.github.io/docs/guides/</link>
    <description>Recent content in Guides on Timber Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="https://timber.github.io/docs/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ACF Cookbook</title>
      <link>https://timber.github.io/docs/guides/acf-cookbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/acf-cookbook/</guid>
      <description>Timber is designed to play nicely with (the amazing) Advanced Custom Fields. It&amp;rsquo;s not a requirement, of course.
While data saved by ACF is available via {{ post.my_acf_field }} you will often need to do some additional work to get back the kind of data you want. For example, images are stored as image ID#s which you might want to translate into a specific image object. Read on to learn more about those specific exceptions.</description>
    </item>
    
    <item>
      <title>Cheatsheet</title>
      <link>https://timber.github.io/docs/guides/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cheatsheet/</guid>
      <description>Here are some helpful conversions for functions you’re probably well familiar with in WordPress and their Timber equivalents. These assume a PHP file with the Timber::get_context(); function at the top. For example:
$context = Timber::get_context(); $context[&#39;post&#39;] = new TimberPost(); Timber::render( &#39;single.twig&#39;, $context );  Blog Info  blog_info(&#39;charset&#39;) =&amp;gt; {{ site.charset }} blog_info(&#39;description&#39;) =&amp;gt; {{ site.description }} blog_info(&#39;sitename&#39;) =&amp;gt; {{ site.name }} blog_info(&#39;url&#39;) =&amp;gt; {{ site.url }}  Body Class  implode(&#39; &#39;, get_body_class()) =&amp;gt; &amp;lt;body class=&amp;quot;{{ body_class }}&amp;quot;&amp;gt;  Post  the_content() =&amp;gt; {{ post.</description>
    </item>
    
    <item>
      <title>Custom Page Templates</title>
      <link>https://timber.github.io/docs/guides/custom-page-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/custom-page-templates/</guid>
      <description>Imagine that you’ve created a page called «About Us» and WordPress has given it the slug about-us. How would you create a custom template just for this page?
There are a few ways to manage custom pages in WordPress and Timber, in order from simple to complex.
Custom Twig File If you&amp;rsquo;re using the Timber Starter Theme you can
 Create a file called page-about-us.twig inside your views and go crazy.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://timber.github.io/docs/guides/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/debugging/</guid>
      <description>Enable debugging To use debugging, the constant WP_DEBUG needs to be set to true.
wp-config.php
&amp;lt;?php define( &#39;WP_DEBUG&#39;, true );  Using Twig’s native functions Twig includes a dump function that can output the properties of an object.
Twig
{{ dump(post) }}  Which will give you:
You can also dump everything sent to your template (contents of $context passed to the Twig file) via:
{{ dump() }}  This will give you something like:</description>
    </item>
    
    <item>
      <title>Escapers</title>
      <link>https://timber.github.io/docs/guides/escapers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/escapers/</guid>
      <description>Universal Escaping By default, Timber does not escape the output of standard tags (i.e. {{ post.field }}). If you want to enable autoescape behavior simply add these lines to functions.php:
if ( class_exists(&#39;Timber&#39;) ) { Timber::$autoescape = &#39;html&#39;; }  General Escapers Twig offers a variety of escapers out of the box. These are intended to escape a string for safe insertion into the final output and there are multiple functions to conform to the strategy dependant on the context.</description>
    </item>
    
    <item>
      <title>Extending Timber</title>
      <link>https://timber.github.io/docs/guides/extending-timber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/extending-timber/</guid>
      <description>Myth: Timber is for making simple themes. Fact: It&amp;rsquo;s for making incredibly complex themes look easy. But yes, you can also make simple sites from it.
The beauty of Timber is that the object-oriented nature lets you extend it to match the exact requirements of your theme.
An example that extends TimberPost Timber&amp;rsquo;s objects like TimberPost, TimberTerm, etc. are a great starting point to build your own subclass from. For example, on this project each post was a part of an &amp;ldquo;issue&amp;rdquo; of a magazine.</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>https://timber.github.io/docs/guides/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/filters/</guid>
      <description>General Filters Twig offers a variety of filters to transform text and other information into the desired output. In addition, Timber has added some valuable custom filters for your WP theme:
excerpt When you need to trim text to a desired length (in words)
Twig
&amp;lt;p class=&amp;quot;intro&amp;quot;&amp;gt;{{post.post_content|excerpt(30)}}...&amp;lt;/p&amp;gt;  Output
&amp;lt;p class=&amp;quot;intro&amp;quot;&amp;gt;Steve-O was born in London, England. His mother, Donna Gay (née Wauthier), was Canadian, and his father, Richard Glover, was American.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://timber.github.io/docs/guides/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/functions/</guid>
      <description>My theme/plugin has some functions I need! Do I really have to re-write all of them?
No, you don’t.
function() You can call all PHP functions through function() in Twig. For example, if you need to call wp_head() and wp_footer(), you’d do it like this:
{# single.twig #} &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- Add whatever you need in the head, and then...--&amp;gt; {{ function(&#39;wp_head&#39;) }} &amp;lt;/head&amp;gt; &amp;lt;!-- etc... --&amp;gt; &amp;lt;footer&amp;gt; Copyright &amp;amp;copy; {{ &amp;quot;now&amp;quot;|date(&#39;Y&#39;) }} &amp;lt;/footer&amp;gt; {{ function(&#39;wp_footer&#39;) }} &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  You can also use fn(&#39;my_function&#39;) as an alias for function(&#39;my_function&#39;).</description>
    </item>
    
    <item>
      <title>Image Cookbook</title>
      <link>https://timber.github.io/docs/guides/cookbook-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cookbook-images/</guid>
      <description>Timber makes it damn easy to use an image in a tag.
Automatically, Timber will interpret images attached to a post’s thumbnail field (&amp;ldquo;Featured Image&amp;rdquo; in the admin) and treat them as instances of Timber\Image. Then, in your Twig templates, you can access them via {{ post.thumbnail }}.
Basic image stuff Again, pretty damn easy:
&amp;lt;img src=&amp;quot;{{ post.thumbnail.src }}&amp;quot; class=&amp;quot;my-thumb-class&amp;quot; alt=&amp;quot;Image for {{ post.title }}&amp;quot; /&amp;gt;  Use a WordPress image size You can use WordPress image sizes (including ones you register with your theme/plugin) by passing the name of the size to src like so:</description>
    </item>
    
    <item>
      <title>Internationalization</title>
      <link>https://timber.github.io/docs/guides/internationalization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/internationalization/</guid>
      <description>Internationalization of a Timber theme works pretty much the same way as it does for default WordPress themes. Follow the guide in the WordPress Theme Handbook to setup i18n for your theme.
Twig has its own i18n extension that gives you {% trans %} tags to define translatable blocks, but there’s no need to use it, because with Timber, you have all you need.
Translation functions Timber supports all the translation functions used in WordPress:</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>https://timber.github.io/docs/guides/menus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/menus/</guid>
      <description>In Timber, you can use Timber\Menu to make a standard WordPress menu available to the Twig template as an object you can loop through.
Once the menu becomes available to the context, you can get items from it in a way that is a little smoother and more versatile than WordPress’s wp_nav_menu() function. (And you never again need to rely on a crazy Walker Function).
Initializing a menu Timber\Menu can be initialized with different values:</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://timber.github.io/docs/guides/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/pagination/</guid>
      <description>Do you like pagination? Stupid question, of course you do. Well, here&amp;rsquo;s how you do it.
Default pagination This will only work in a php file with an active query (like archive.php or home.php):
&amp;lt;?php $context = Timber::get_context(); $context[&#39;posts&#39;] = new Timber\PostQuery(); Timber::render(&#39;archive.twig&#39;, $context);  You can then markup the output like so (of course, the exact markup is up to YOU):
&amp;lt;div class=&amp;quot;tool-pagination&amp;quot;&amp;gt; {% if posts.pagination.prev %} &amp;lt;a href=&amp;quot;{{posts.</description>
    </item>
    
    <item>
      <title>Performance/Caching</title>
      <link>https://timber.github.io/docs/guides/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/performance/</guid>
      <description>Timber, especially in conjunction with WordPress and Twig, offers a variety of caching strategies to optimize performance. Here’s a quick rundown of some of the options, ranked in order of most-broad to most-focused.
tl;dr In my tests with Debug Bar, Timber has no measurable performance hit. Everything compiles to PHP. @fabpot has an overview of the performance costs on his blog (scroll down to the table).
Cache Everything You can still use plugins like W3 Total Cache in conjunction with Timber.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://timber.github.io/docs/guides/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/routing/</guid>
      <description>Among its other special powers, Timber includes modern routing in the Express.js/Ruby on Rails mold, making it easy for you to implement custom pagination&amp;ndash;and anything else you might imagine in your wildest dreams of URLs and parameters. OMG so easy!
Some examples In your functions.php file, this can be called anywhere (don&amp;rsquo;t hook it to init or another action or it might be called too late)
&amp;lt;?php Routes::map(&#39;blog/:name&#39;, function($params){ $query = &#39;posts_per_page=3&amp;amp;post_type=&#39;.</description>
    </item>
    
    <item>
      <title>Sidebars</title>
      <link>https://timber.github.io/docs/guides/sidebars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/sidebars/</guid>
      <description>So you want a sidebar?
Method 1: PHP file Let&amp;rsquo;s say every page on the site has the same content going into its sidebar. If so, you would: Create a sidebar.php file in your theme directory (so wp-content/themes/mytheme/sidebar.php)
&amp;lt;?php /* sidebar.php */ $context = array(); $context[&#39;widget&#39;] = my_function_to_get_widget(); $context[&#39;ad&#39;] = my_function_to_get_an_ad(); Timber::render(&#39;sidebar.twig&#39;, $context);   Use that php file within your main php file (home.php, single.php, archive.php, etc):  &amp;lt;?</description>
    </item>
    
    <item>
      <title>Template Locations</title>
      <link>https://timber.github.io/docs/guides/template-locations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/template-locations/</guid>
      <description>You can set your own locations for your twig files with&amp;hellip;
&amp;lt;?php Timber::$locations = &#39;/Users/jared/Sandbox/templates&#39;;  Use the full file path to make sure Timber knows what you&amp;rsquo;re trying to draw from. You can also send an array for multiple locations:
&amp;lt;?php Timber::$locations = array( &#39;/Users/jared/Sandbox/templates&#39;, &#39;~/Sites/timber-templates/&#39;, ABSPATH.&#39;/wp-content/templates&#39; );  You only need to do this once in your project (in functions.php of your theme). When you call one of the render or compile functions from a PHP file (say single.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://timber.github.io/docs/guides/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/testing/</guid>
      <description>Setup a testing environment with PHPUnit Follow the setup steps for Varying Vagrant Vagrants. If you’re having trouble I recommend starting 100% fresh (uninstall and delete everything including VirtualBox). For this walk-through we’re going to start from scratch:
1. Install VVV Follow the setup instructions — don&amp;rsquo;t forget to install VirtualBox and Vagrant first! For this tutorial I&amp;rsquo;m going to assume you&amp;rsquo;ve installed into ~/vagrant-local/
2. Set up Timber for tests Navigate into the www directory and clone Timber&amp;hellip;</description>
    </item>
    
    <item>
      <title>Text Cookbook</title>
      <link>https://timber.github.io/docs/guides/cookbook-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cookbook-text/</guid>
      <description>There’s tons of stuff you can do with Twig and Timber filters to make complex transformations easy (and fun).
Dates Example 1: Bylines Timber does bylines like a boss:
&amp;lt;p class=&amp;quot;byline&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;name&amp;quot;&amp;gt;By {{ post.author.name }}&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;date&amp;quot;&amp;gt;{{ post.post_date|date(&#39;F j, Y&#39;) }}&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt;  Renders
&amp;lt;p class=&amp;quot;byline&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;name&amp;quot;&amp;gt;By Mr. WordPress&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;date&amp;quot;&amp;gt;September 28, 2013&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;  Example 2: Copyright year Nothing is worse than an out-of-date copyright year in the footer. Nothing.</description>
    </item>
    
    <item>
      <title>Twig Cookbook</title>
      <link>https://timber.github.io/docs/guides/cookbook-twig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cookbook-twig/</guid>
      <description>Using Twig vars in live type Imagine this scenario, I let the users set this in the Admin panel:
Copyright {{year}} by Upstatement, LLC. All Rights Reserved  But on the site I want it to render as:
Copyright 2013 by Upstatement, LLC. All Rights Reserved  Ready? There are a bunch of ways, but my favorite is:
In your PHP file
&amp;lt;?php $data[&#39;year&#39;] = date(&#39;Y&#39;); $data[&#39;copyright&#39;] = get_option(&amp;quot;footer_message&amp;quot;); //&amp;quot;Copyright {{year}} by Upstatement, LLC.</description>
    </item>
    
    <item>
      <title>WooCommerce</title>
      <link>https://timber.github.io/docs/guides/woocommerce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/woocommerce/</guid>
      <description>Point of entry - main WooCommerce PHP file The first step to get your WooCommerce project integrated with Timber is creating a file named woocommerce.php in the root of your theme. That will establish the context and data to be passed to your Twig files:
&amp;lt;?php if ( ! class_exists( &#39;Timber&#39; ) ){ echo &#39;Timber not activated. Make sure you activate the plugin in &amp;lt;a href=&amp;quot;/wp-admin/plugins.php#timber&amp;quot;&amp;gt;/wp-admin/plugins.php&amp;lt;/a&amp;gt;&#39;; return; } $context = Timber::get_context(); $context[&#39;sidebar&#39;] = Timber::get_widgets( &#39;shop-sidebar&#39; ); if ( is_singular( &#39;product&#39; ) ) { $context[&#39;post&#39;] = Timber::get_post(); $product = wc_get_product( $context[&#39;post&#39;]-&amp;gt;ID ); $context[&#39;product&#39;] = $product; // Get related products $related_limit = wc_get_loop_prop( &#39;columns&#39; ); $related_ids = wc_get_related_products( $context[&#39;post&#39;]-&amp;gt;id, $related_limit ); $context[&#39;related_products&#39;] = Timber::get_posts( $related_ids ); // Restore the context and loop back to the main query loop.</description>
    </item>
    
    <item>
      <title>WordPress Integration</title>
      <link>https://timber.github.io/docs/guides/wp-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/wp-integration/</guid>
      <description>Timber plays nicely with your existing WordPress setup. You can still use other plugins, etc.
the_content You’re probably used to call the_content() in your theme file. This is good. Before outputting, WordPress will run all the filters and actions that your plugins and themes are using. If you want to get this into your new Timber theme (and you probably do), call it like this:
&amp;lt;div class=&amp;quot;my-article&amp;quot;&amp;gt; {{ post.content }} &amp;lt;/div&amp;gt;  This differs from {{ post.</description>
    </item>
    
  </channel>
</rss>