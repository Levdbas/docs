<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timber Docs</title>
    <link>https://timber.github.io/docs/</link>
    <description>Recent content on Timber Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="https://timber.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ACF Cookbook</title>
      <link>https://timber.github.io/docs/guides/acf-cookbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/acf-cookbook/</guid>
      <description>Timber is designed to play nicely with (the amazing) Advanced Custom Fields. It&amp;rsquo;s not a requirement, of course.
While data saved by ACF is available via {{ post.my_acf_field }} you will often need to do some additional work to get back the kind of data you want. For example, images are stored as image ID#s which you might want to translate into a specific image object. Read on to learn more about those specific exceptions.</description>
    </item>
    
    <item>
      <title>Cheatsheet</title>
      <link>https://timber.github.io/docs/guides/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cheatsheet/</guid>
      <description>Here are some helpful conversions for functions you’re probably well familiar with in WordPress and their Timber equivalents. These assume a PHP file with the Timber::get_context(); function at the top. For example:
$context = Timber::get_context(); $context[&#39;post&#39;] = new Timber\Post(); Timber::render( &#39;single.twig&#39;, $context );  Blog Info  blog_info(&#39;charset&#39;) =&amp;gt; {{ site.charset }} blog_info(&#39;description&#39;) =&amp;gt; {{ site.description }} blog_info(&#39;sitename&#39;) =&amp;gt; {{ site.name }} blog_info(&#39;url&#39;) =&amp;gt; {{ site.url }}  Body Class  implode(&#39; &#39;, get_body_class()) =&amp;gt; &amp;lt;body class=&amp;quot;{{ body_class }}&amp;quot;&amp;gt;  Post  the_content() =&amp;gt; {{ post.</description>
    </item>
    
    <item>
      <title>Custom Page Templates</title>
      <link>https://timber.github.io/docs/guides/custom-page-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/custom-page-templates/</guid>
      <description>Imagine that you’ve created a page called «About Us» and WordPress has given it the slug about-us. How would you create a custom template just for this page?
There are a few ways to manage custom pages in WordPress and Timber, in order from simple to complex.
Custom Twig File If you&amp;rsquo;re using the Timber Starter Theme you can
 Create a file called page-about-us.twig inside your views and go crazy.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://timber.github.io/docs/guides/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/debugging/</guid>
      <description>Enable debugging To use debugging, the constant WP_DEBUG needs to be set to true.
wp-config.php
define( &#39;WP_DEBUG&#39;, true );  Using Twig’s native functions Twig includes a dump function that can output the properties of an object.
Twig
{{ dump(post) }}  Which will give you:
You can also dump everything sent to your template (all the contents of $context that were passed to the Twig file) via:
{{ dump() }}  This will give you something like:</description>
    </item>
    
    <item>
      <title>Escapers</title>
      <link>https://timber.github.io/docs/guides/escapers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/escapers/</guid>
      <description>Universal Escaping By default, Timber does not escape the output of standard tags (i.e. {{ post.field }}). If you want to enable autoescape behavior simply add these lines to functions.php:
if ( class_exists(&#39;Timber&#39;) ) { Timber::$autoescape = &#39;html&#39;; }  General Escapers Twig offers a variety of escapers out of the box. These are intended to escape a string for safe insertion into the final output and there are multiple functions to conform to the strategy dependant on the context.</description>
    </item>
    
    <item>
      <title>Extending Timber</title>
      <link>https://timber.github.io/docs/guides/extending-timber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/extending-timber/</guid>
      <description>Myth: Timber is for making simple themes. Fact: It&amp;rsquo;s for making incredibly complex themes look easy. But yes, you can also make simple sites from it.
The beauty of Timber is that the object-oriented nature lets you extend it to match the exact requirements of your theme.
An example that extends TimberPost Timber&amp;rsquo;s objects like Timber\Post, Timber\Term, etc. are a great starting point to build your own subclass from. For example, on this project each post was a part of an &amp;ldquo;issue&amp;rdquo; of a magazine.</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>https://timber.github.io/docs/guides/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/filters/</guid>
      <description>General Filters Twig offers a variety of filters to transform text and other information into the desired output. In addition, Timber has added some valuable custom filters for your WP theme:
excerpt When you need to trim text to a desired length (in words)
Twig
&amp;lt;p class=&amp;quot;intro&amp;quot;&amp;gt;{{post.post_content|excerpt(30)}}...&amp;lt;/p&amp;gt;  Output
&amp;lt;p class=&amp;quot;intro&amp;quot;&amp;gt;Steve-O was born in London, England. His mother, Donna Gay (née Wauthier), was Canadian, and his father, Richard Glover, was American.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://timber.github.io/docs/guides/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/functions/</guid>
      <description>My theme/plugin has some functions I need! Do I really have to re-write all of them?
No, you don’t.
function() You can call all PHP functions through function() in Twig. For example, if you need to call wp_head() and wp_footer(), you’d do it like this:
{# single.twig #} &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- Add whatever you need in the head, and then...--&amp;gt; {{ function(&#39;wp_head&#39;) }} &amp;lt;/head&amp;gt; &amp;lt;!-- etc... --&amp;gt; &amp;lt;footer&amp;gt; Copyright &amp;amp;copy; {{ &amp;quot;now&amp;quot;|date(&#39;Y&#39;) }} &amp;lt;/footer&amp;gt; {{ function(&#39;wp_footer&#39;) }} &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  You can also use fn(&#39;my_function&#39;) as an alias for function(&#39;my_function&#39;).</description>
    </item>
    
    <item>
      <title>Gutenberg</title>
      <link>https://timber.github.io/docs/guides/gutenberg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/gutenberg/</guid>
      <description>Using Gutenberg with Timber Timber works with Gutenberg out of the box. If you use {{ post.content }}, Timber will render all the Gutenberg blocks.
ACF Blocks What are ACF Blocks? ACF Blocks are an alternative way to create content blocks without advanced JavaScript knowledge. If you want to learn more about them, read the article on advancedcustomfields.com.
How to use ACF Blocks with Timber Before you can start using ACF Blocks, you must install the Advanced Custom Fields 5.</description>
    </item>
    
    <item>
      <title>Image Cookbook</title>
      <link>https://timber.github.io/docs/guides/cookbook-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cookbook-images/</guid>
      <description>Timber makes it damn easy to use an image in a tag.
Automatically, Timber will interpret images attached to a post’s thumbnail field (&amp;ldquo;Featured Image&amp;rdquo; in the admin) and treat them as instances of Timber\Image. Then, in your Twig templates, you can access them via {{ post.thumbnail }}.
Basic image stuff Again, pretty damn easy:
&amp;lt;img src=&amp;quot;{{ post.thumbnail.src }}&amp;quot; class=&amp;quot;my-thumb-class&amp;quot; alt=&amp;quot;Image for {{ post.title }}&amp;quot; /&amp;gt;  Use a WordPress image size You can use WordPress image sizes (including ones you register with your theme/plugin) by passing the name of the size to src like so:</description>
    </item>
    
    <item>
      <title>Internationalization</title>
      <link>https://timber.github.io/docs/guides/internationalization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/internationalization/</guid>
      <description>Internationalization of a Timber theme works pretty much the same way as it does for default WordPress themes. Follow the guide in the WordPress Theme Handbook to setup i18n for your theme.
Twig has its own i18n extension that gives you {% trans %} tags to define translatable blocks, but there’s no need to use it, because with Timber, you have all you need.
Translation functions Timber supports all the translation functions used in WordPress:</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>https://timber.github.io/docs/guides/menus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/menus/</guid>
      <description>In Timber, you can use Timber\Menu to make a standard WordPress menu available to the Twig template as an object you can loop through.
Once the menu becomes available to the context, you can get items from it in a way that is a little smoother and more versatile than WordPress’s wp_nav_menu() function. (And you never again need to rely on a crazy Walker Function).
Initializing a menu Timber\Menu can be initialized with different values:</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://timber.github.io/docs/guides/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/pagination/</guid>
      <description>Do you like pagination? Stupid question, of course you do. Well, here&amp;rsquo;s how you do it.
Default pagination This will only work in a php file with an active query (like archive.php or home.php):
&amp;lt;?php $context = Timber::get_context(); $context[&#39;posts&#39;] = new Timber\PostQuery(); Timber::render(&#39;archive.twig&#39;, $context);  You can then markup the output like so (of course, the exact markup is up to YOU):
&amp;lt;div class=&amp;quot;tool-pagination&amp;quot;&amp;gt; {% if posts.pagination.prev %} &amp;lt;a href=&amp;quot;{{posts.</description>
    </item>
    
    <item>
      <title>Performance/Caching</title>
      <link>https://timber.github.io/docs/guides/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/performance/</guid>
      <description>Timber, especially in conjunction with WordPress and Twig, offers a variety of caching strategies to optimize performance. Here’s a quick rundown of some of the options, ranked in order of most-broad to most-focused.
tl;dr In my tests with Debug Bar, Timber has no measurable performance hit. Everything compiles to PHP. @fabpot has an overview of the performance costs on his blog (scroll down to the table).
Cache Everything You can still use plugins like W3 Total Cache in conjunction with Timber.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://timber.github.io/docs/guides/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/routing/</guid>
      <description>Among its other special powers, Timber includes modern routing in the Express.js/Ruby on Rails mold, making it easy for you to implement custom pagination&amp;ndash;and anything else you might imagine in your wildest dreams of URLs and parameters. OMG so easy!
Some examples In your functions.php file, this can be called anywhere (don&amp;rsquo;t hook it to init or another action or it might be called too late)
&amp;lt;?php Routes::map(&#39;blog/:name&#39;, function($params){ $query = &#39;posts_per_page=3&amp;amp;post_type=&#39;.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>https://timber.github.io/docs/getting-started/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/getting-started/setup/</guid>
      <description>Installation Via WordPress.org (easy) You can grab the all-things-included plugin at WordPress.org either through the WordPress site or through the Plugins menu in the backend. Then skip ahead to using the starter theme.
Via GitHub (for developers) The GitHub version of Timber requires Composer. If you&amp;rsquo;d prefer one-click installation, you should use the WordPress.org version.
composer require timber/timber  If your theme is not setup to pull in Composer’s autoload file, you will need to add the following at the top of your functions.</description>
    </item>
    
    <item>
      <title>Sidebars</title>
      <link>https://timber.github.io/docs/guides/sidebars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/sidebars/</guid>
      <description>So you want a sidebar?
Method 1: PHP file Let&amp;rsquo;s say every page on the site has the same content going into its sidebar. If so, you would: Create a sidebar.php file in your theme directory (so wp-content/themes/mytheme/sidebar.php)
&amp;lt;?php /* sidebar.php */ $context = array(); $context[&#39;widget&#39;] = my_function_to_get_widget(); $context[&#39;ad&#39;] = my_function_to_get_an_ad(); Timber::render(&#39;sidebar.twig&#39;, $context);   Use that php file within your main php file (home.php, single.php, archive.php, etc):  &amp;lt;?</description>
    </item>
    
    <item>
      <title>Template Locations</title>
      <link>https://timber.github.io/docs/guides/template-locations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/template-locations/</guid>
      <description>You can set your own locations for your twig files with&amp;hellip;
&amp;lt;?php Timber::$locations = &#39;/Users/jared/Sandbox/templates&#39;;  Use the full file path to make sure Timber knows what you&amp;rsquo;re trying to draw from. You can also send an array for multiple locations:
&amp;lt;?php Timber::$locations = array( &#39;/Users/jared/Sandbox/templates&#39;, &#39;~/Sites/timber-templates/&#39;, ABSPATH.&#39;/wp-content/templates&#39; );  You only need to do this once in your project (in functions.php of your theme). When you call one of the render or compile functions from a PHP file (say single.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://timber.github.io/docs/guides/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/testing/</guid>
      <description>Setup a testing environment with PHPUnit Follow the setup steps for Varying Vagrant Vagrants. If you’re having trouble I recommend starting 100% fresh (uninstall and delete everything including VirtualBox). For this walk-through we’re going to start from scratch:
1. Install VVV Follow the setup instructions — don&amp;rsquo;t forget to install VirtualBox and Vagrant first! For this tutorial I&amp;rsquo;m going to assume you&amp;rsquo;ve installed into ~/vagrant-local/
2. Set up Timber for tests Navigate into the www directory and clone Timber&amp;hellip;</description>
    </item>
    
    <item>
      <title>Text Cookbook</title>
      <link>https://timber.github.io/docs/guides/cookbook-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cookbook-text/</guid>
      <description>There’s tons of stuff you can do with Twig and Timber filters to make complex transformations easy (and fun).
Dates Example 1: Bylines Timber does bylines like a boss:
&amp;lt;p class=&amp;quot;byline&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;name&amp;quot;&amp;gt;By {{ post.author.name }}&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;date&amp;quot;&amp;gt;{{ post.post_date|date(&#39;F j, Y&#39;) }}&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt;  Renders
&amp;lt;p class=&amp;quot;byline&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;name&amp;quot;&amp;gt;By Mr. WordPress&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;date&amp;quot;&amp;gt;September 28, 2013&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;  Example 2: Copyright year Nothing is worse than an out-of-date copyright year in the footer. Nothing.</description>
    </item>
    
    <item>
      <title>Theming</title>
      <link>https://timber.github.io/docs/getting-started/theming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/getting-started/theming/</guid>
      <description>Your first Timber project Let’s start with your single post. Find this file:
wp-content/themes/{timber-starter-theme}/templates/single.twig  Brilliant! Open it up.
{% extends &amp;quot;base.twig&amp;quot; %} {% block content %} &amp;lt;div class=&amp;quot;content-wrapper&amp;quot;&amp;gt; &amp;lt;article class=&amp;quot;post-type-{{ post.post_type }}&amp;quot; id=&amp;quot;post-{{ post.ID }}&amp;quot;&amp;gt; &amp;lt;section class=&amp;quot;article-content&amp;quot;&amp;gt; &amp;lt;h1 class=&amp;quot;article-h1&amp;quot;&amp;gt;{{ post.title }}&amp;lt;/h1&amp;gt; &amp;lt;h2 class=&amp;quot;article-h2&amp;quot;&amp;gt;{{ post.subtitle }}&amp;lt;/h2&amp;gt; &amp;lt;p class=&amp;quot;blog-author&amp;quot;&amp;gt; &amp;lt;span&amp;gt;By&amp;lt;/span&amp;gt; {{ post.author.name }} &amp;lt;span&amp;gt;&amp;amp;bull;&amp;lt;/span&amp;gt; {{ post.post_date|date }} &amp;lt;/p&amp;gt; {{ post.content }} &amp;lt;/section&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;/div&amp;gt; {% endblock %}  What did we just do?</description>
    </item>
    
    <item>
      <title>Timber\Archives</title>
      <link>https://timber.github.io/docs/reference/timber-archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-archives/</guid>
      <description>&lt;p&gt;The TimberArchives class is used to generate a menu based on the date archives of your posts. The &lt;a href=&#34;http://nieman.harvard.edu/news/&#34;&gt;Nieman Foundation News site&lt;/a&gt; has an example of how the output can be used in a real site (&lt;a href=&#34;https://cloud.githubusercontent.com/assets/1298086/9610076/3cdca596-50a5-11e5-82fd-acb74c09c482.png&#34;&gt;screenshot&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Comment</title>
      <link>https://timber.github.io/docs/reference/timber-comment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-comment/</guid>
      <description>&lt;p&gt;The Timber\Comment class is used to view the output of comments. 99% of the time this will be in the context of the comments on a post. However you can also fetch a comment directly using its comment ID.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Helper</title>
      <link>https://timber.github.io/docs/reference/timber-helper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-helper/</guid>
      <description>&lt;p&gt;As the name suggests these are helpers for Timber (and you!) when developing. You can find additional (mainly internally-focused helpers) in TimberURLHelper&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Image</title>
      <link>https://timber.github.io/docs/reference/timber-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-image/</guid>
      <description>&lt;p&gt;If TimberPost is the class you&amp;rsquo;re going to spend the most time, Timber\Image is the class you&amp;rsquo;re going to have the most fun with.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\ImageHelper</title>
      <link>https://timber.github.io/docs/reference/timber-imagehelper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-imagehelper/</guid>
      <description>&lt;p&gt;Implements the Twig image filters:
&lt;a href=&#34;https://timber.github.io/docs/guides/cookbook-images/#arbitrary-resizing-of-images&#34;&gt;https://timber.github.io/docs/guides/cookbook-images/#arbitrary-resizing-of-images&lt;/a&gt;
- resize
- retina
- letterbox
- tojpg&lt;/p&gt;

&lt;p&gt;Implementation:
- public static functions provide the methods that are called by the filter
- most of the work is common to all filters (URL analysis, directory gymnastics, file caching, error management) and done by private static functions
- the specific part (actual image processing) is delegated to dedicated subclasses of TimberImageOperation&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Menu</title>
      <link>https://timber.github.io/docs/reference/timber-menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-menu/</guid>
      <description>Overview Properties    Name Type Description     depth integer The depth of the menu we are rendering   items array/null Array of Timber\Menu objects you can to iterate through.   id integer The ID of the menu, corresponding to the wp_terms table.   ID integer The ID of the menu, corresponding to the wp_terms table.   term_id integer The ID of the menu, corresponding to the wp_terms table.</description>
    </item>
    
    <item>
      <title>Timber\MenuItem</title>
      <link>https://timber.github.io/docs/reference/timber-menuitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-menuitem/</guid>
      <description>Overview Properties    Name Type Description     children array Array of children of a menu item. Empty if there are no child menu items.   has_child_class bool Whether the menu item has a menu-item-has-children CSS class.   classes array Array of class names.   current bool Whether the menu item links to the currently displayed page.   current_item_parent bool Whether the menu item refers to the parent item of the currently displayed page.</description>
    </item>
    
    <item>
      <title>Timber\Pagination</title>
      <link>https://timber.github.io/docs/reference/timber-pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-pagination/</guid>
      <description>Overview Methods    Name Type Returns/Description     get_pagination array mixed    Class Methods __construct __construct( array $prefs=array(), mixed $wp_query=null )
returns: void
   Name Type Description     $prefs array    $wp_query mixed     get_pagination get_pagination( array $prefs=array() )
returns: array mixed
Get pagination.
   Name Type Description     $prefs array     paginate_links paginate_links( array $args=array() )</description>
    </item>
    
    <item>
      <title>Timber\Post</title>
      <link>https://timber.github.io/docs/reference/timber-post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-post/</guid>
      <description>&lt;p&gt;This is the object you use to access or extend WordPress posts. Think of it as Timber&amp;rsquo;s (more accessible) version of WP_Post. This is used throughout Timber to represent posts retrieved from WordPress making them available to Twig templates. See the PHP and Twig examples for an example of what it&amp;rsquo;s like to work with this object in your code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\PostPreview</title>
      <link>https://timber.github.io/docs/reference/timber-postpreview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-postpreview/</guid>
      <description>&lt;p&gt;The PostPreview class lets a user modify a post preview/excerpt to their liking.&lt;/p&gt;

&lt;p&gt;It’s designed to be used through the &lt;code&gt;Timber\Post::preview()&lt;/code&gt; method. The public methods of this
class all return the object itself, which means that this is a &lt;strong&gt;chainable object&lt;/strong&gt;. You can
change the output of the preview by &lt;strong&gt;adding more methods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By default, the preview will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have a length of 50 words, which will be forced, even if a longer excerpt is set on the post.&lt;/li&gt;
&lt;li&gt;be stripped of all HTML tags.&lt;/li&gt;
&lt;li&gt;have an ellipsis (…) as the end of the text.&lt;/li&gt;
&lt;li&gt;have a &amp;ldquo;Read More&amp;rdquo; link appended.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Timber\PostQuery</title>
      <link>https://timber.github.io/docs/reference/timber-postquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-postquery/</guid>
      <description>&lt;p&gt;A PostQuery allows a user to query for a Collection of WordPress Posts.
PostCollections are used directly in Twig templates to iterate through and retrieve
meta information about the collection of posts&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Site</title>
      <link>https://timber.github.io/docs/reference/timber-site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-site/</guid>
      <description>&lt;p&gt;Timber\Site gives you access to information you need about your site. In Multisite setups, you can get info on other sites in your network.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Term</title>
      <link>https://timber.github.io/docs/reference/timber-term/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-term/</guid>
      <description>&lt;p&gt;Terms: WordPress has got &amp;lsquo;em, you want &amp;lsquo;em. Categories. Tags. Custom
Taxonomies. You don&amp;rsquo;t care, you&amp;rsquo;re a fiend. Well let&amp;rsquo;s get this under control:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\TextHelper</title>
      <link>https://timber.github.io/docs/reference/timber-texthelper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-texthelper/</guid>
      <description>&lt;p&gt;Class provides different text-related functions
commonly used in WordPress development&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Theme</title>
      <link>https://timber.github.io/docs/reference/timber-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-theme/</guid>
      <description>&lt;p&gt;Need to display info about your theme? Well you&amp;rsquo;ve come to the right place. By default info on the current theme comes for free with what&amp;rsquo;s fetched by &lt;code&gt;Timber::get_context()&lt;/code&gt; in which case you can access it your theme like so:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\Timber</title>
      <link>https://timber.github.io/docs/reference/timber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber/</guid>
      <description>&lt;p&gt;Timber Class.&lt;/p&gt;

&lt;p&gt;Main class called Timber for this plugin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Timber\URLHelper</title>
      <link>https://timber.github.io/docs/reference/timber-urlhelper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-urlhelper/</guid>
      <description>Class Methods file_system_to_url file_system_to_url( string $fs )
returns: void
   Name Type Description     $fs string     get_content_subdir get_content_subdir( )
returns: string (ex: /wp-content or /content)
Get the path to the content directory relative to the site. This replaces the WP_CONTENT_SUBDIR constant
get_current_url get_current_url( )
returns: string
get_full_path get_full_path( string $src )
returns: string
   Name Type Description     $src string     get_host get_host( )</description>
    </item>
    
    <item>
      <title>Timber\User</title>
      <link>https://timber.github.io/docs/reference/timber-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/reference/timber-user/</guid>
      <description>&lt;p&gt;This is used in Timber to represent users retrived from WordPress. You can call &lt;code&gt;$my_user = new Timber\User(123);&lt;/code&gt; directly, or access it through the &lt;code&gt;{{ post.author }}&lt;/code&gt; method.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Twig Cookbook</title>
      <link>https://timber.github.io/docs/guides/cookbook-twig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/cookbook-twig/</guid>
      <description>Using Twig vars in live type Imagine this scenario, I let the users set this in the Admin panel:
Copyright {{year}} by Upstatement, LLC. All Rights Reserved  But on the site I want it to render as:
Copyright 2013 by Upstatement, LLC. All Rights Reserved  Ready? There are a bunch of ways, but my favorite is:
In your PHP file
&amp;lt;?php $data[&#39;year&#39;] = date(&#39;Y&#39;); $data[&#39;copyright&#39;] = get_option(&amp;quot;footer_message&amp;quot;); //&amp;quot;Copyright {{year}} by Upstatement, LLC.</description>
    </item>
    
    <item>
      <title>Twig Tools</title>
      <link>https://timber.github.io/docs/getting-started/twig-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/getting-started/twig-tools/</guid>
      <description>The purpose of this page is to identify helpful tools for working with Twig.
Text editor add-ons  Text Mate &amp;amp; Sublime text bundle – Anomareh&amp;rsquo;s PHP-Twig Emacs – Web Mode Geany – Add Twig/Symfony2 detection and highlighting PhpStorm – Built in coloring and code hinting. The Twig extension is recognized and has been for some time. Twig Details for PhpStorm. Atom – Syntax highlighting with the Atom Component.  WordPress tools  Lisa Templates – allows you to write Twig-templates in the WordPress admin that renders through a shortcode, widget or on the_content hook.</description>
    </item>
    
    <item>
      <title>Upgrade to 1.0</title>
      <link>https://timber.github.io/docs/upgrade-guides/1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/upgrade-guides/1.0/</guid>
      <description>A significant part of this 1.0 release is removing lots of deprecated functions and methods that go back to the earliest designs for Timber in early 2013.
Should I upgrade? Maybe. Read on:
I have a legacy site If you wrote a theme in 2014, it&amp;rsquo;s running fine and the development of the site has concluded: stop right there! Do not upgrade! While there are some slight performance benefits (and not having the warning light on the plugin dashboard) it&amp;rsquo;s not worth it to you.</description>
    </item>
    
    <item>
      <title>Video Tutorials</title>
      <link>https://timber.github.io/docs/getting-started/video-tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/getting-started/video-tutorials/</guid>
      <description>1. Install Timber Option 1: Via GitHub (for developers) 1) Navigate to your WordPress plugins directory $ cd ~/Sites/mywordpress/wp-content/plugins  2) Use git to grab the repo $ git clone git@github.com:timber/timber.git  3) Use Composer to download the dependencies (Twig, etc.) $ cd timber $ composer install  You can find a guide on how to get started with Composer in the official documentation.
Option 2: Via Composer (for developers) 1) Navigate to your WordPress plugins directory $ cd ~/Sites/mywordpress/wp-content/plugins  2) Use Composer to create project and download the dependencies (Twig, etc.</description>
    </item>
    
    <item>
      <title>WooCommerce</title>
      <link>https://timber.github.io/docs/guides/woocommerce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/woocommerce/</guid>
      <description>Point of entry - main WooCommerce PHP file The first step to get your WooCommerce project integrated with Timber is declaring WooCommerce support in your theme’s functions.php file like so:
function theme_add_woocommerce_support() { add_theme_support( &#39;woocommerce&#39; ); } add_action( &#39;after_setup_theme&#39;, &#39;theme_add_woocommerce_support&#39; );  For more information about how you can enable or disable features and change settings through theme support, refer to the WooCommerce Theme Developer Handbook.
Once that’s done you can start integrating WooCommerce into your theme by creating a file named woocommerce.</description>
    </item>
    
    <item>
      <title>WordPress Integration</title>
      <link>https://timber.github.io/docs/guides/wp-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timber.github.io/docs/guides/wp-integration/</guid>
      <description>Timber plays nicely with your existing WordPress setup. You can still use other plugins, etc.
the_content You’re probably used to call the_content() in your theme file. This is good. Before outputting, WordPress will run all the filters and actions that your plugins and themes are using. If you want to get this into your new Timber theme (and you probably do), call it like this:
&amp;lt;div class=&amp;quot;my-article&amp;quot;&amp;gt; {{ post.content }} &amp;lt;/div&amp;gt;  This differs from {{ post.</description>
    </item>
    
  </channel>
</rss>